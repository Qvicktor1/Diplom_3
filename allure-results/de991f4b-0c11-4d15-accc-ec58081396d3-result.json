{"name": "Checking the opening of the order details pop-up window", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8f5f48f248c3a6292712d39dae8e2c5e\")>\n\n    @pytest.fixture()\n    def create_new_order_and_get_its_number(driver):\n        main_page = MainPage(driver)\n        main_page.click_element(Mpl.constructor_button_header)\n        main_page.drag_and_drop_element(Mpl.ingredient_name, Mpl.constructor_upper_bun_placeholder)\n        main_page.drag_and_drop_element(Mpl.fluoric_bun_name, Mpl.constructor_upper_bun_placeholder)\n        main_page.click_element(Mpl.place_order_button)\n        time.sleep(2)\n>       main_page.check_if_created_order_number_is_shown()\n\ntests\\conftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:21: in check_if_created_order_number_is_shown\n    self.wait_till_text_is_shown(Mpl.order_number, '0')\npages\\base_page.py:49: in wait_till_text_is_shown\n    WebDriverWait(self.driver, 10).until(ec.text_to_be_present_in_element(locator, text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8f5f48f248c3a6292712d39dae8e2c5e\")>, method = <function text_to_be_present_in_element.<locals>._predicate at 0x0000026DAA036520>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "Checks that clicking on the order opens order details pop-up window", "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1719759060887, "stop": 1719759060887, "uuid": "2f1c40ab-e2fb-4b23-b34c-33e90d56830d", "historyId": "2572fdc309174014f75203d7844e47a6", "testCaseId": "cb4e3a46d5f944310088c750ba6ba46f", "fullName": "tests.test_feed.TestFeed#test_click_on_order_opens_details_popup_window", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_feed"}, {"name": "subSuite", "value": "TestFeed"}, {"name": "host", "value": "DESKTOP-4KK18J8"}, {"name": "thread", "value": "2892-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_feed"}]}