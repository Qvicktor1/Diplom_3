{"name": "Checking the transition to the \"Orders History\" ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6FC0CEEA2+31554]\n\t(No symbol) [0x00007FF6FC047ED9]\n\t(No symbol) [0x00007FF6FBF0872A]\n\t(No symbol) [0x00007FF6FBEDD995]\n\t(No symbol) [0x00007FF6FBF844D7]\n\t(No symbol) [0x00007FF6FBF9C051]\n\t(No symbol) [0x00007FF6FBF7CDD3]\n\t(No symbol) [0x00007FF6FBF4A33B]\n\t(No symbol) [0x00007FF6FBF4AED1]\n\tGetHandleVerifier [0x00007FF6FC3D8B1D+3217341]\n\tGetHandleVerifier [0x00007FF6FC425AE3+3532675]\n\tGetHandleVerifier [0x00007FF6FC41B0E0+3489152]\n\tGetHandleVerifier [0x00007FF6FC17E776+750614]\n\t(No symbol) [0x00007FF6FC05375F]\n\t(No symbol) [0x00007FF6FC04EB14]\n\t(No symbol) [0x00007FF6FC04ECA2]\n\t(No symbol) [0x00007FF6FC03E16F]\n\tBaseThreadInitThunk [0x00007FFFE0547344+20]\n\tRtlUserThreadStart [0x00007FFFE075CC91+33]", "trace": "self = <tests.test_account.TestAccount object at 0x00000197A0DA9250>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"44ed8d1d61b376b0effd1e9d1760e9b4\")>, create_user = 'wbpetorhao@ya.ru', sign_in = None\n\n    @allure.title('Checking the transition to the \"Orders History\" ')\n    @allure.description('Checks that clicking on the \"Orders History\" url in the Profile opens \"Orders History\".')\n    def test_click_on_order_history_url_opens_orders_history_page(self, driver, create_user, sign_in):\n        main_page = MainPage(driver)\n        main_page.click_element(Mpl.account_button_header)\n        profile_page = ProfilePage(driver)\n>       profile_page.click_element(Ppl.orders_history_url)\n\ntests\\test_account.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:19: in click_element\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(locator)).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000197A0D86B90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF6FC03E16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFE0547344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFE075CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6FC0CEEA2+31554]\nE       \t(No symbol) [0x00007FF6FC047ED9]\nE       \t(No symbol) [0x00007FF6FBF0872A]\nE       \t(No symbol) [0x00007FF6FBEDD995]\nE       \t(No symbol) [0x00007FF6FBF844D7]\nE       \t(No symbol) [0x00007FF6FBF9C051]\nE       \t(No symbol) [0x00007FF6FBF7CDD3]\nE       \t(No symbol) [0x00007FF6FBF4A33B]\nE       \t(No symbol) [0x00007FF6FBF4AED1]\nE       \tGetHandleVerifier [0x00007FF6FC3D8B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF6FC425AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF6FC41B0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF6FC17E776+750614]\nE       \t(No symbol) [0x00007FF6FC05375F]\nE       \t(No symbol) [0x00007FF6FC04EB14]\nE       \t(No symbol) [0x00007FF6FC04ECA2]\nE       \t(No symbol) [0x00007FF6FC03E16F]\nE       \tBaseThreadInitThunk [0x00007FFFE0547344+20]\nE       \tRtlUserThreadStart [0x00007FFFE075CC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Checks that clicking on the \"Orders History\" url in the Profile opens \"Orders History\".", "steps": [{"name": "Clicking on the specified element", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', \".//a[@href='/account']\")"}], "start": 1719767584602, "stop": 1719767584626}, {"name": "Clicking on the specified element", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6FC0CEEA2+31554]\n\t(No symbol) [0x00007FF6FC047ED9]\n\t(No symbol) [0x00007FF6FBF0872A]\n\t(No symbol) [0x00007FF6FBEDD995]\n\t(No symbol) [0x00007FF6FBF844D7]\n\t(No symbol) [0x00007FF6FBF9C051]\n\t(No symbol) [0x00007FF6FBF7CDD3]\n\t(No symbol) [0x00007FF6FBF4A33B]\n\t(No symbol) [0x00007FF6FBF4AED1]\n\tGetHandleVerifier [0x00007FF6FC3D8B1D+3217341]\n\tGetHandleVerifier [0x00007FF6FC425AE3+3532675]\n\tGetHandleVerifier [0x00007FF6FC41B0E0+3489152]\n\tGetHandleVerifier [0x00007FF6FC17E776+750614]\n\t(No symbol) [0x00007FF6FC05375F]\n\t(No symbol) [0x00007FF6FC04EB14]\n\t(No symbol) [0x00007FF6FC04ECA2]\n\t(No symbol) [0x00007FF6FC03E16F]\n\tBaseThreadInitThunk [0x00007FFFE0547344+20]\n\tRtlUserThreadStart [0x00007FFFE075CC91+33]\n\n", "trace": "  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\pages\\base_page.py\", line 19, in click_element\n    WebDriverWait(self.driver, 10).until(ec.visibility_of_element_located(locator)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 156, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Apaxuc\\PycharmProjects\\Diplom\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "locator", "value": "('xpath', \".//a[text()='История заказов']\")"}], "start": 1719767584626, "stop": 1719767593237}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1719767584602, "stop": 1719767593239, "uuid": "36247414-01b5-4900-9ea1-ffb0eb1cb3e2", "historyId": "e549b9da9e1705c7d9124fe22c7791a1", "testCaseId": "31580d9798b0c1aa5f4d375d31e370c6", "fullName": "tests.test_account.TestAccount#test_click_on_order_history_url_opens_orders_history_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_account"}, {"name": "subSuite", "value": "TestAccount"}, {"name": "host", "value": "DESKTOP-4KK18J8"}, {"name": "thread", "value": "2772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_account"}]}